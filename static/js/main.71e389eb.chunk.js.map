{"version":3,"sources":["sortingAlgorithms/sortingAlgorithms.js","SortingVisualizer/SortingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","switchSpot","temp","getBubbleSortAnimations","check","bubbleSortHelper","getInsertionSortAnimations","insertionSortHelper","getSelectionSortAnimations","smallestIdx","selectionSortHelper","SortingVisualizer","props","state","this","resetArray","min","max","random","setState","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","className","map","value","idx","key","onClick","mergeSort","selectionSort","insertionSort","bubbleSort","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.71e389eb.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) {\r\n  const animations = [];\r\n  if (array.length <= 1) return array;\r\n  const auxiliaryArray = array.slice();\r\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n  return animations;\r\n}\r\n\r\nfunction mergeSortHelper(\r\n  mainArray,\r\n  startIdx,\r\n  endIdx,\r\n  auxiliaryArray,\r\n  animations,\r\n) {\r\n  if (startIdx === endIdx) return;\r\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n}\r\n\r\nfunction doMerge(\r\n  mainArray,\r\n  startIdx,\r\n  middleIdx,\r\n  endIdx,\r\n  auxiliaryArray,\r\n  animations,\r\n) {\r\n  let k = startIdx;\r\n  let i = startIdx;\r\n  let j = middleIdx + 1;\r\n  while (i <= middleIdx && j <= endIdx) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([i, j]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([i, j]);\r\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index i in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[i]]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    } else {\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index j in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[j]]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }\r\n  while (i <= middleIdx) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([i, i]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([i, i]);\r\n    // We overwrite the value at index k in the original array with the\r\n    // value at index i in the auxiliary array.\r\n    animations.push([k, auxiliaryArray[i]]);\r\n    mainArray[k++] = auxiliaryArray[i++];\r\n  }\r\n  while (j <= endIdx) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([j, j]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([j, j]);\r\n    // We overwrite the value at index k in the original array with the\r\n    // value at index j in the auxiliary array.\r\n    animations.push([k, auxiliaryArray[j]]);\r\n    mainArray[k++] = auxiliaryArray[j++];\r\n  }\r\n}\r\n\r\nfunction switchSpot(array, i, j) {\r\n  let temp = array[i];\r\n  array[i] = array[j];\r\n  array[j] = temp;\r\n}\r\n\r\nexport function getBubbleSortAnimations(array) {\r\n  const animations = [];\r\n  if (array.length <= 1) return array;\r\n  bubbleSortHelper(array, animations);\r\n  return animations;\r\n}\r\n\r\nfunction bubbleSortHelper(\r\n  array,\r\n  animations,\r\n) {\r\n  let check = true;\r\n  while(check) {\r\n    check = false;\r\n    for (var i = 0; i < array.length-1; i++) {\r\n      animations.push([i, i+1]); \r\n      animations.push([i, i+1]);\r\n      if (array[i] > array[i+1]) {\r\n        animations.push([i, array[i+1]]);\r\n        animations.push([i+1, array[i]]);\r\n        switchSpot(array, i, i+1);\r\n        check = true;\r\n      } else {\r\n         animations.push([i, array[i]]);\r\n         animations.push([i, array[i]]);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport function getInsertionSortAnimations(array) {\r\n  const animations = [];\r\n  if (array.length <= 1) return array;\r\n  insertionSortHelper(array, animations);\r\n  return animations;\r\n}\r\n\r\nfunction insertionSortHelper(\r\n  array,\r\n  animations,\r\n) {\r\n    for (var i = 1; i < array.length; i++) {\r\n      let j = i;\r\n\r\n      while (j > 0) {\r\n        animations.push([j-1, j]); \r\n        animations.push([j-1, j]);\r\n        if (array[j] < array[j-1]){\r\n          animations.push([j-1, array[j]]);\r\n          animations.push([j, array[j-1]]);\r\n          switchSpot(array, j-1, j);\r\n        } else {\r\n          animations.push([j, array[j]]);\r\n          animations.push([j, array[j]]);\r\n          break;\r\n        }\r\n\r\n        j--;\r\n    }\r\n  }\r\n}\r\n\r\n\r\nexport function getSelectionSortAnimations(array) {\r\n  const animations = [];\r\n  if (array.length <= 1) return array;\r\n  selectionSortHelper(array, animations);\r\n  return animations;\r\n}\r\n\r\nfunction selectionSortHelper(\r\n  array,\r\n  animations,\r\n) {\r\n  let startIdx = 0;\r\n  while(startIdx < array.length-1) {\r\n    let smallestIdx = startIdx;\r\n    for (var i = startIdx; i < array.length; i++) {\r\n      animations.push([i, smallestIdx]); \r\n      animations.push([i, smallestIdx]); \r\n      if (array[i] < array[smallestIdx]) {\r\n        smallestIdx = i;\r\n      }\r\n      animations.push([i, array[i]]);\r\n      animations.push([i, array[i]]);\r\n    }\r\n    \r\n    animations.push([startIdx, smallestIdx]); \r\n    animations.push([startIdx, smallestIdx]); \r\n\r\n    animations.push([startIdx, array[smallestIdx]]);\r\n    animations.push([smallestIdx, array[startIdx]]);\r\n    switchSpot(array, startIdx, smallestIdx);\r\n    startIdx++;\r\n  }\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport {getMergeSortAnimations} from '../sortingAlgorithms/sortingAlgorithms.js';\r\nimport {getBubbleSortAnimations} from '../sortingAlgorithms/sortingAlgorithms.js';\r\nimport {getInsertionSortAnimations} from '../sortingAlgorithms/sortingAlgorithms.js';\r\nimport {getSelectionSortAnimations} from '../sortingAlgorithms/sortingAlgorithms.js';\r\nimport './SortingVisualizer.css';\r\n\r\n// Value for the speed of the animations.\r\nconst ANIMATION_SPEED_MS = 1;\r\n\r\n// Value for the number of bars (value) in the array.\r\nconst NUMBER_OF_ARRAY_BARS = 100;\r\n\r\n// Main color of the array bars.\r\nconst PRIMARY_COLOR = 'turquoise';\r\n\r\n// Color of array bars that are being compared.\r\nconst SECONDARY_COLOR = 'red';\r\n\r\nexport default class SortingVisualizer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      array: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.resetArray();\r\n  }\r\n\r\n// Create a random array of size NUMBER_OF_ARRAY_BARS\r\n  resetArray() {\r\n    const array = [];\r\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\r\n      array.push(randomIntFromInterval(5, 650));\r\n    }\r\n    this.setState({array});\r\n  }\r\n\r\n  mergeSort() {\r\n    const animations = getMergeSortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      const isColorChange = i % 3 !== 2;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          barOneStyle.height = `${newHeight}px`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n  }\r\n\r\n  selectionSort() {\r\n    const animations = getSelectionSortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      const isColorChange = (i % 4 == 0) || (i % 4 == 1);\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 4 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          barOneStyle.height = `${newHeight}px`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n  }\r\n\r\n  insertionSort() {\r\n    const animations = getInsertionSortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      const isColorChange = (i % 4 == 0) || (i % 4 == 1);\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 4 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          barOneStyle.height = `${newHeight}px`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n  }\r\n\r\n  bubbleSort() {\r\n    const animations = getBubbleSortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      const isColorChange = (i % 4 == 0) || (i % 4 == 1);\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 4 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          barOneStyle.height = `${newHeight}px`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {array} = this.state;\r\n\r\n    return (\r\n      <div className=\"array-container\">\r\n        {array.map((value, idx) => (\r\n          <div\r\n            className=\"array-bar\"\r\n            key={idx}\r\n            style={{\r\n              backgroundColor: PRIMARY_COLOR,\r\n              height: `${value}px`,\r\n            }}></div>\r\n        ))}\r\n\r\n        <button onClick={() => this.resetArray()}>Generate New Array</button>\r\n        <button onClick={() => this.mergeSort()}>Merge Sort</button>\r\n        <button onClick={() => this.selectionSort()}>Selection Sort</button>\r\n        <button onClick={() => this.insertionSort()}>Insertion Sort</button>\r\n        <button onClick={() => this.bubbleSort()}>Bubble Sort</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction randomIntFromInterval(min, max) {\r\n  // min and max included\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nfunction arraysAreEqual(arrayOne, arrayTwo) {\r\n  if (arrayOne.length !== arrayTwo.length) return false;\r\n  for (let i = 0; i < arrayOne.length; i++) {\r\n    if (arrayOne[i] !== arrayTwo[i]) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}","import React from 'react';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}